<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_psi_interface_8h" kind="file" language="C++">
    <compoundname>PsiInterface.h</compoundname>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/msg.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/sem.h</includes>
    <includes local="no">sys/shm.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">../dataio/AsciiFile.h</includes>
    <includes local="no">../dataio/AsciiTable.h</includes>
    <incdepgraph>
      <node id="2">
        <label>sys/stat.h</label>
      </node>
      <node id="10">
        <label>stdarg.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>sys/shm.h</label>
      </node>
      <node id="3">
        <label>sys/msg.h</label>
      </node>
      <node id="12">
        <label>errno.h</label>
      </node>
      <node id="1">
        <label>fcntl.h</label>
      </node>
      <node id="13">
        <label>../dataio/AsciiFile.h</label>
      </node>
      <node id="5">
        <label>sys/sem.h</label>
      </node>
      <node id="4">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="11">
        <label>unistd.h</label>
      </node>
      <node id="14">
        <label>../dataio/AsciiTable.h</label>
      </node>
      <node id="0">
        <label>/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h</label>
        <link refid="_psi_interface_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmsgbuf__t" prot="public">msgbuf_t</innerclass>
    <innerclass refid="structpsi_input__t" prot="public">psiInput_t</innerclass>
    <innerclass refid="structpsi_output__t" prot="public">psiOutput_t</innerclass>
    <innerclass refid="structpsi_rpc__t" prot="public">psiRpc_t</innerclass>
    <innerclass refid="structpsi_ascii_file_output__t" prot="public">psiAsciiFileOutput_t</innerclass>
    <innerclass refid="structpsi_ascii_file_input__t" prot="public">psiAsciiFileInput_t</innerclass>
    <innerclass refid="structpsi_ascii_table_output__t" prot="public">psiAsciiTableOutput_t</innerclass>
    <innerclass refid="structpsi_ascii_table_input__t" prot="public">psiAsciiTableInput_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_psi_interface_8h_1ab4898bbe6eb1c1d8b2ef19ada4dee530" prot="public" static="no">
        <name>PSI_MSG_MAX</name>
        <initializer>1024*2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="17" column="9" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_psi_interface_8h_1a51f9d450ac9270c1f2ac6abd50085825" prot="public" static="no">
        <name>PSI_MSG_EOF</name>
        <initializer>&quot;EOF!!!&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="18" column="9" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_psi_interface_8h_1ac13baa41dad6c8dcf3dfc1c9fe70346e" prot="public" static="no">
        <name>_psiTrackChannels</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="21" column="9" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_psi_interface_8h_1a0c5e59a7caaa02f887d077eaa467f209" prot="public" static="no">
        <name>error</name>
        <initializer>psiError</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="114" column="9" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_psi_interface_8h_1a322565ccf348d13e4d3de13af771e5fc" prot="public" static="no">
        <name>debug</name>
        <initializer>while (0) psiDebug</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="127" column="12" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_psi_interface_8h_1a07b32b3e4728b7d10b82d882268e96fa" prot="public" static="no">
        <name>info</name>
        <initializer>while (0) psiInfo</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="128" column="11" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_psi_interface_8h_1ab25b78dbdcfc80e5682ba74df22ead03" prot="public" static="no">
        <type>struct <ref refid="structmsgbuf__t" kindref="compound">msgbuf_t</ref></type>
        <definition>typedef struct msgbuf_t  msgbuf_t</definition>
        <argsstring></argsstring>
        <name>msgbuf_t</name>
        <briefdescription>
<para>Message buffer structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a234061a0fef69d795747048e9d48cfde" prot="public" static="no">
        <type>struct <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
        <definition>typedef struct psiInput_t  psiInput_t</definition>
        <argsstring></argsstring>
        <name>psiInput_t</name>
        <briefdescription>
<para>Input queue structure. Contains information on an input queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a5cefc78f71b7d35ac2ad71eb2ea6e4e0" prot="public" static="no">
        <type>struct <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
        <definition>typedef struct psiOutput_t  psiOutput_t</definition>
        <argsstring></argsstring>
        <name>psiOutput_t</name>
        <briefdescription>
<para>Output queue structure. Contains information on an output queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a6ca04498abc2ba0a7aa303766d8a541f" prot="public" static="no">
        <type>struct <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
        <definition>typedef struct psiRpc_t  psiRpc_t</definition>
        <argsstring></argsstring>
        <name>psiRpc_t</name>
        <briefdescription>
<para>Remote Procedure Call (RPC) structure. Contains information required to coordinate sending/receiving response/requests from/to an RPC server/client. </para>        </briefdescription>
        <detaileddescription>
<para>Remote Procedure Call (RPC) IO</para><para>Handle IO case of a server receiving input from clients, performing some calculation, and then sending a response back to the client.</para><para>Server Usage:<orderedlist>
<listitem><para>One-time: Create server channels with format specifiers for input and output. <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> srv = psiRpcServer(&quot;srv_name&quot;, &quot;%d&quot;, &quot;%d %d&quot;);</para></listitem><listitem><para>Prepare: Allocate space for recovered variables from request. int a;</para></listitem><listitem><para>Receive request: int ret = rpcRecv(srv, &amp;a);</para></listitem><listitem><para>Process: Do tasks the server should do with input to produce output. int b = 2*a; int c = 3*a;</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Send response: ret = rpcSend(srv, b, c);</para></listitem></orderedlist>
</para><para>Client Usage:<orderedlist>
<listitem><para>One-time: Create client channels to desired server with format specifiers for output and input (should be the same arguments as for the server except for name). <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> cli = psiRpcClient(&quot;cli_name&quot;, &quot;%d&quot;, &quot;%d %d&quot;);</para></listitem><listitem><para>Prepare: Allocate space for recovered variables from response. int b, c;</para></listitem><listitem><para>Call server: int ret = rpcCall(cli, 1, &amp;b, &amp;c);</para></listitem></orderedlist>
</para><para>Clients can also send several requests at once before receiving any responses. This allows the server to be processing the next requests while the client handles the previous response, thereby increasing efficiency. The responses are assumed to be in the same order as the generating requests (i.e. first come, first served). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1aadab9a1b0528d3dea0551bc5e8d3effc" prot="public" static="no">
        <type>struct <ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref></type>
        <definition>typedef struct psiAsciiFileOutput_t  psiAsciiFileOutput_t</definition>
        <argsstring></argsstring>
        <name>psiAsciiFileOutput_t</name>
        <briefdescription>
<para>Structure of information for output to a file line by line. </para>        </briefdescription>
        <detaileddescription>
<para>File IO</para><para>Handle I/O from/to a local or remote file line by line.</para><para>Input Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file. <ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> fin = psiAsciiFileInput(&quot;file_channel&quot;, 1); // channel <ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> fin = psiAsciiFileInput(&quot;/local/file.txt&quot;, 0); // local file</para></listitem><listitem><para>Prepare: Allocate space for lines. char line[PSI_MSG_MAX];</para></listitem><listitem><para>Receive each line, terminating when receive returns -1 (EOF or channel closed). int ret = 1; while (ret &gt; 0) { ret = af_recv_line(fin, line, PSI_MSG_MAX); Do something with the line }</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pafi(&amp;fin);</para></listitem></orderedlist>
</para><para>Output Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file. <ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> fout = psiAsciiFileOutput(&quot;file_channel&quot;, 1); // channel <ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> fout = psiAsciiFileOutput(&quot;/local/file.txt&quot;, 0); // local file</para></listitem><listitem><para>Send lines to the file. If return value is not 0, the send was not succesfull. int ret; ret = af_send_line(fout, &quot;Line 1\n&quot;); ret = af_send_line(fout, &quot;Line 2\n&quot;);</para></listitem><listitem><para>Send EOF message when done to close the file. ret = af_send_eof(fout);</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pafo(&amp;fout); </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1054" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a7411de1236ea3272ff532819271d0679" prot="public" static="no">
        <type>struct <ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref></type>
        <definition>typedef struct psiAsciiFileInput_t  psiAsciiFileInput_t</definition>
        <argsstring></argsstring>
        <name>psiAsciiFileInput_t</name>
        <briefdescription>
<para>Structure of information for input from a file line by line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1065" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a405369fdc9d677596ba4fe9858ed83eb" prot="public" static="no">
        <type>struct <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
        <definition>typedef struct psiAsciiTableOutput_t  psiAsciiTableOutput_t</definition>
        <argsstring></argsstring>
        <name>psiAsciiTableOutput_t</name>
        <briefdescription>
<para>Structure for handling output to an ASCII table. </para>        </briefdescription>
        <detaileddescription>
<para>Table IO</para><para>Handle I/O from/to a local or remote ASCII table either line-by-line or as an array.</para><para><heading level="1">Row-by-Row </heading>
</para><para>Input by Row Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file. <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> fin = psiAsciiTableInput(&quot;file_channel&quot;, 1); // channel <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> fin = psiAsciiTableInput(&quot;/local/file.txt&quot;, 0); // local table</para></listitem><listitem><para>Prepare: Allocate space for variables in row (the format in this example is &quot;%5s %d %f\n&quot; like the output example below). char a[5]; int b; double c;</para></listitem><listitem><para>Receive each row, terminating when receive returns -1 (EOF or channel closed). int ret = 1; while (ret &gt; 0) { ret = at_recv_row(fin, &amp;a, &amp;b, &amp;c); Do something with the row }</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pati(&amp;fin);</para></listitem></orderedlist>
</para><para>Output by Row Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file and a format string for rows. <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> fout = psiAsciiTableOutput(&quot;file_channel&quot;, // channel &quot;%5s %d %f\n&quot;, 1); <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> fout = psiAsciiTableOutput(&quot;/local/file.txt&quot;, // local table &quot;%5s %d %f\n&quot;, 0);</para></listitem><listitem><para>Send rows to the file by providing entries. Formatting is handled by the interface. If return value is not 0, the send was not succesful. int ret; ret = at_send_row(fout, &quot;one&quot;, 1, 1.0); ret = at_send_row(fout, &quot;two&quot;, 2, 2.0);</para></listitem><listitem><para>Send EOF message when done to close the file. ret = at_send_eof(fout);</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pato(&amp;fout);</para></listitem></orderedlist>
</para><para><heading level="1">Array </heading>
</para><para>Input by Array Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file. <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> fin = psiAsciiTableInput(&quot;file_channel&quot;, 1); // channel <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> fin = psiAsciiTableInput(&quot;/local/file.txt&quot;, 0); // local table</para></listitem><listitem><para>Prepare: Declare pointers for table columns (they will be allocated by the interface once the number of rows is known). char *aCol; int *bCol; double *cCol;</para></listitem><listitem><para>Receive entire table as columns. Return value will be the number of elements in each column (the number of table rows). Negative values indicate errors. int ret = at_recv_array(fin, &amp;a, &amp;b, &amp;c);</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pati(&amp;fin);</para></listitem></orderedlist>
</para><para>Output by Array Usage:<orderedlist>
<listitem><para>One-time: Create file interface by providing either a channel name or a path to a local file and a format string for rows. <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> fout = psiAsciiTableOutput(&quot;file_channel&quot;, // channel &quot;%5s %d %f\n&quot;, 1); <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> fout = psiAsciiTableOutput(&quot;/local/file.txt&quot;, // local table &quot;%5s %d %f\n&quot;, 0);</para></listitem><listitem><para>Send columns to the file by providing pointers (or arrays). Formatting is handled by the interface. If return value is not 0, the send was not succesful. char aCol[] = {&quot;one  &quot;, &quot;two  &quot;, &quot;three&quot;}; \ Each str is of len 5 int bCol[3] = {1, 2, 3}; float cCol[3] = {1.0, 2.0, 3.0}; int ret = at_send_array(fout, a, b, c);</para></listitem><listitem><para>Cleanup. Call functions to deallocate structures and close files. cleanup_pato(&amp;fout); </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1308" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_psi_interface_8h_1a29da1027f2ac15c869631cbd326338b1" prot="public" static="no">
        <type>struct <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
        <definition>typedef struct psiAsciiTableInput_t  psiAsciiTableInput_t</definition>
        <argsstring></argsstring>
        <name>psiAsciiTableInput_t</name>
        <briefdescription>
<para>Structure for handling input from an ASCII table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1319" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_psi_interface_8h_1a2997772bcc4be69ae75af9c8bf656519" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* _psiChannelNames[_psiTrackChannels]</definition>
        <argsstring>[_psiTrackChannels]</argsstring>
        <name>_psiChannelNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="22" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_psi_interface_8h_1a48658cb4b55eba05559ffed852ccb19d" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned _psiChannelsUsed</definition>
        <argsstring></argsstring>
        <name>_psiChannelsUsed</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="23" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_psi_interface_8h_1a2059b2fabbacee5e6de895822beb99cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int count_formats</definition>
        <argsstring>(const char *fmt_str)</argsstring>
        <name>count_formats</name>
        <param>
          <type>const char *</type>
          <declname>fmt_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="27" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aec18e891e7c91b1367b4f06593e1ec79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psiLog</definition>
        <argsstring>(const char *prefix, const char *fmt, va_list ap)</argsstring>
        <name>psiLog</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Print a log message. Prints a formatted message, prepending it with the process id and appending it with a newline. </para>        </briefdescription>
        <detaileddescription>
<para>Logging</para><para>Alliases are set at compile-time based on the value of PSI_CLIENT_DEBUG. If set to INFO, only messages logged with info or error alias are printed. If set to DEBUG, messages logged with error, info or debug aliases are printed. Otherwise, only error messages are printed. If the PSI_CLIENT_DEBUG is changed, any code including this header must be recompiled for the change to take effect.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>a constant character pointer to the prefix that should preceed the message and process id. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>a constant character pointer to a format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list of arguments to be formatted in the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="63" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a6b44c3e329adaefe66dc287a7c17e011" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psiInfo</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>psiInfo</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print an info log message. Prints a formatted message, prepending it with INFO and the process id. A newline character is added to the end of the message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>a constant character pointer to a format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be formatted in the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="77" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a0f3106ecb4f6631f5e3365ef9fc2a43a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psiDebug</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>psiDebug</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print an debug log message. Prints a formatted message, prepending it with DEBUG and the process id. A newline character is added to the end of the message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>a constant character pointer to a format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be formatted in the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="92" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a421a16574bb84cfdd1ab3fd743079be3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psiError</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>psiError</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print an error log message. Prints a formatted message, prepending it with ERROR and the process id. A newline character is added to the end of the message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>a constant character pointer to a format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be formatted in the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="107" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a3fed45ae6b99750bbbbf766e87e7c3a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_mq</definition>
        <argsstring>(char *name, const char *yamlName)</argsstring>
        <name>psi_mq</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>yamlName</declname>
        </param>
        <briefdescription>
<para>Get a sysv_ipc queue identifier based on its name. The queue name is used to locate the queue key stored in the associated environment variable. That key is then used to get the queue ID. </para>        </briefdescription>
        <detaileddescription>
<para>Basic IO</para><para>Output Usage:<orderedlist>
<listitem><para>One-time: Create output channel (store in named variables) <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> output_channel = psiOutput(&quot;out_name&quot;);</para></listitem><listitem><para>Prepare: Format data to a character array buffer. char buffer[PSI_MSG_MAX]; sprintf(buffer, &quot;a=%d, b=%d&quot;, 1, 2);</para></listitem><listitem><para>Send: ret = psi_send(output_channel, buffer, strlen(buffer));</para></listitem></orderedlist>
</para><para>Input Usage:<orderedlist>
<listitem><para>One-time: Create output channel (store in named variables) <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> input_channel = psiInput(&quot;in_name&quot;);</para></listitem><listitem><para>Prepare: Allocate a character array buffer. char buffer[PSI_MSG_MAX];</para></listitem><listitem><para>Receive: int ret = psi_recv(input_channel, buffer, PSI_MSG_MAX);</para></listitem></orderedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to name of environment variable that the queue key should be shored in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">yamlName</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to the original name of the queue, absent any suffix. This is used to check if there is an existing queue with that name, but a different suffix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int queue identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="166" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="166" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5a71fa7ccc73fd95daa6f67a085bde30" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
        <definition>static psiOutput_t psiOutput</definition>
        <argsstring>(const char *name)</argsstring>
        <name>psiOutput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure. Create a <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure based on a provided name that is used to locate a particular sysv_ipc queue key stored in the environment variable name + &quot;_OUT&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name of queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> output queue structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="242" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a75b07f1d0d5c17a46069a4fa97381a03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
        <definition>static psiInput_t psiInput</definition>
        <argsstring>(const char *name)</argsstring>
        <name>psiInput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> structure. Create a <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> structure based on a provided name that is used to locate a particular sysv_ipc queue key stored in the environment variable name + &quot;_IN&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name of queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> input queue structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="262" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="262" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5380ec3dfb907e1b5623283c7cd3f658" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
        <definition>static psiOutput_t psi_output</definition>
        <argsstring>(const char *name)</argsstring>
        <name>psi_output</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Alias for psiOutput. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="275" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a33da9b264b334e2fa1203ae7cbf6e217" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
        <definition>static psiInput_t psi_input</definition>
        <argsstring>(const char *name)</argsstring>
        <name>psi_input</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Alias for psiInput. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="281" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a001ce1e3095f022326691cf36d3704f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
        <definition>static psiOutput_t psiOutputFmt</definition>
        <argsstring>(const char *name, char *fmtString)</argsstring>
        <name>psiOutputFmt</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fmtString</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure with format. Create a <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure based on a provided name that is used to locate a particular sysv_ipc queue key stored in the environment variable name + &quot;_OUT&quot; and a format string that can be used to format arguments into outgoing messages for the queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name of queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmtString</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> output queue structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="296" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aaa3509adf84c86e8e3d40798f32a3d91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
        <definition>static psiInput_t psiInputFmt</definition>
        <argsstring>(const char *name, char *fmtString)</argsstring>
        <name>psiInputFmt</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fmtString</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> structure with format. Create a <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> structure based on a provided name that is used to locate a particular sysv_ipc queue key stored in the environment variable name + &quot;_IN&quot; and a format stirng that can be used to extract arguments from messages received from the queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name of queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmtString</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> input queue structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="313" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1afdc43e0a5a525c76d5738a8ebcf63df7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_output_nmsg</definition>
        <argsstring>(psiOutput_t psiQ)</argsstring>
        <name>psi_output_nmsg</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <briefdescription>
<para>Get the number of messages in an output queue. Check how many messages are waiting in the associated queue for an output queue structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> output queue structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of messages in the queue. -1 if the queue cannot be accessed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="328" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="328" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5dc48a06675e64d6db31f67a49491d07" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_input_nmsg</definition>
        <argsstring>(psiInput_t psiQ)</argsstring>
        <name>psi_input_nmsg</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <briefdescription>
<para>Get the number of messages in an input queue. Check how many messages are waiting in the associated queue for an input queue structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> input queue structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of messages in the queue. -1 if the queue cannot be accessed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="350" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="350" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1adc0a2735efdc76e88586bc667b1adedc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_send</definition>
        <argsstring>(psiOutput_t psiQ, char *data, int len)</argsstring>
        <name>psi_send</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Send a message to an output queue. Send a message smaller than PSI_MSG_MAX bytes to an output queue. If the message is larger, it will not be sent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that queue should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to message that should be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of message to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="373" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="373" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a972c93543c79f484dbe74c0acdd874f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_recv</definition>
        <argsstring>(psiInput_t psiQ, char *data, int len)</argsstring>
        <name>psi_recv</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Receive a message from an input queue. Receive a message smaller than PSI_MSG_MAX bytes from an input queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to allocated buffer where the message should be saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of the allocated message buffer in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received. Length of the received message if message was received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="413" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="413" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aac9241b696c3d615ddeee95f0a5e74e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_send_nolimit</definition>
        <argsstring>(psiOutput_t psiQ, char *data, int len)</argsstring>
        <name>psi_send_nolimit</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Send a large message to an output queue. Send a message larger than PSI_MSG_MAX bytes to an output queue by breaking it up between several smaller messages and sending initial message with the size of the message that should be expected. Must be partnered with psi_recv_nolimit for communication to make sense. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to message that should be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of message to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="453" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="453" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1afa235566d3df6db412b52caa9b548ba5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psi_recv_nolimit</definition>
        <argsstring>(psiInput_t psiQ, char **data, int len0)</argsstring>
        <name>psi_recv_nolimit</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len0</declname>
        </param>
        <briefdescription>
<para>Receive a large message from an input queue. Receive a message larger than PSI_MSG_MAX bytes from an input queue by receiving it in parts. This expects the first message to be the size of the total message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to pointer for allocated buffer where the message should be stored. A pointer to a pointer is used so that the buffer may be reallocated as necessary for the incoming message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len0</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of the initial allocated message buffer in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received. Length of the received message if message was received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="499" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="499" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ad079888e1b56ee70b8a22e401ea8c3fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vpsiSend</definition>
        <argsstring>(psiOutput_t psiQ, va_list ap)</argsstring>
        <name>vpsiSend</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Send arguments as a small formatted message to an output queue. Use the format string to create a message from the input arguments that is then sent to the specified output queue. If the message is larger than PSI_MSG_MAX or cannot be encoded, it will not be sent. </para>        </briefdescription>
        <detaileddescription>
<para>Formatted IO</para><para>Output Usage:<orderedlist>
<listitem><para>One-time: Create output channel with format specifier. <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> output_channel = psiOutputFmt(&quot;out_name&quot;, &quot;a=%d, b=%d&quot;);</para></listitem><listitem><para>Send: ret = psiSend(output_channel, 1, 2);</para></listitem></orderedlist>
</para><para>Input Usage:<orderedlist>
<listitem><para>One-time: Create output channel with format specifier. <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> input_channel = psiInput(&quot;in_name&quot;, &quot;a=%d, b=%d&quot;);</para></listitem><listitem><para>Prepare: Allocate space for recovered variables. int a, b;</para></listitem><listitem><para>Receive: int ret = psiRecv(input_channel, &amp;a, &amp;b);</para></listitem></orderedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that queue should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list arguments to be formatted into a message using sprintf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="576" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="576" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ab260126f1b7bb6040e18a1100dcb7876" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vpsiRecv</definition>
        <argsstring>(psiInput_t psiQ, va_list ap)</argsstring>
        <name>vpsiRecv</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Assign arguments by receiving and parsing a message from an input queue. Receive a message smaller than PSI_MSG_MAX bytes from an input queue and parse it using the associated format string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list arguments that should be assigned by parsing the received message using sscanf. As these are being assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or could not be parsed. Length of the received message if message was received and parsed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="605" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="605" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a4293da6e3c87ca72525ecae4b0818fbe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psiSend</definition>
        <argsstring>(psiOutput_t psiQ,...)</argsstring>
        <name>psiSend</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Send arguments as a small formatted message to an output queue. Use the format string to create a message from the input arguments that is then sent to the specified output queue. If the message is larger than PSI_MSG_MAX or cannot be encoded, it will not be sent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that queue should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be formatted into a message using sprintf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="634" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="634" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a0fcfba570d59bbedd7a35026eee0b521" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psiRecv</definition>
        <argsstring>(psiInput_t psiQ,...)</argsstring>
        <name>psiRecv</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Assign arguments by receiving and parsing a message from an input queue. Receive a message smaller than PSI_MSG_MAX bytes from an input queue and parse it using the associated format string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments that should be assigned by parsing the received message using sscanf. As these are being assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or could not be parsed. Length of the received message if message was received and parsed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="654" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="654" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a881d7f9b4da8f055291ccb9177b3cb7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vpsiSend_nolimit</definition>
        <argsstring>(psiOutput_t psiQ, va_list ap)</argsstring>
        <name>vpsiSend_nolimit</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Send arguments as a large formatted message to an output queue. Use the format string to create a message from the input arguments that is then sent to the specified output queue. The message can be larger than PSI_MSG_MAX. If it cannot be encoded, it will not be sent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that queue should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list arguments to be formatted into a message using sprintf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if formatting and send succesfull, -1 if formatting or send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="673" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="673" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1adc5d75245a867935c5c9a28346de48b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vpsiRecv_nolimit</definition>
        <argsstring>(psiInput_t psiQ, va_list ap)</argsstring>
        <name>vpsiRecv_nolimit</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Assign arguments by receiving and parsing a message from an input queue. Receive a message larger than PSI_MSG_MAX bytes in chunks from an input queue and parse it using the associated format string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list arguments that should be assigned by parsing the received message using sscanf. As these are being assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or could not be parsed. Length of the received message if message was received and parsed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="703" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="703" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a05c4cd155a51148cbf2f349268e22b80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psiSend_nolimit</definition>
        <argsstring>(psiOutput_t psiQ,...)</argsstring>
        <name>psiSend_nolimit</name>
        <param>
          <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Send arguments as a large formatted message to an output queue. Use the format string to create a message from the input arguments that is then sent to the specified output queue. The message can be larger than PSI_MSG_MAX. If it cannot be encoded, it will not be sent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> structure that queue should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be formatted into a message using sprintf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if formatting and send succesfull, -1 if formatting or send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="736" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="736" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1af7de5118391ad402559647b460b957ef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psiRecv_nolimit</definition>
        <argsstring>(psiInput_t psiQ,...)</argsstring>
        <name>psiRecv_nolimit</name>
        <param>
          <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
          <declname>psiQ</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Assign arguments by receiving and parsing a message from an input queue. Receive a message larger than PSI_MSG_MAX bytes in chunks from an input queue and parse it using the associated format string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psiQ</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> structure that message should be sent to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments that should be assigned by parsing the received message using sscanf. As these are being assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or could not be parsed. Length of the received message if message was received and parsed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="756" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="756" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a7c5f439f1492b8acfd01b0a0334997dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
        <definition>static psiRpc_t psiRpc</definition>
        <argsstring>(const char *outName, char *outFormat, const char *inName, char *inFormat)</argsstring>
        <name>psiRpc</name>
        <param>
          <type>const char *</type>
          <declname>outName</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>outFormat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>inName</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>inFormat</declname>
        </param>
        <briefdescription>
<para>Constructor for RPC structure. Creates an instance of <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> with provided information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">outName</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer name of the output queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">outFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for formatting output. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inName</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name of the input queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for parsing input. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with provided info. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="829" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="829" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a7a11c6766ef06754d96279849be8865a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
        <definition>static psiRpc_t psiRpcClient</definition>
        <argsstring>(const char *name, char *outFormat, char *inFormat)</argsstring>
        <name>psiRpcClient</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>outFormat</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>inFormat</declname>
        </param>
        <briefdescription>
<para>Constructor for client side RPC structure. Creates an instance of <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> with provided information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name for queues. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">outFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for formatting output. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for parsing input. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with provided info. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="850" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="850" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a26ee676a478da87e12bf9c9bac2a6b1d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
        <definition>static psiRpc_t psiRpcServer</definition>
        <argsstring>(const char *name, char *inFormat, char *outFormat)</argsstring>
        <name>psiRpcServer</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>inFormat</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>outFormat</declname>
        </param>
        <briefdescription>
<para>Constructor for server side RPC structure. Creates an instance of <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> with provided information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to name for queues. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for parsing input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">outFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format that should be used for formatting output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with provided info. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="866" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="866" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ad5d6f8a3980b08347ac3b9ad19fd197b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vrpcSend</definition>
        <argsstring>(psiRpc_t rpc, va_list ap)</argsstring>
        <name>vrpcSend</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Format and send a message to an RPC output queue. Format provided arguments list using the output queue format string and then sends it to the output queue under the assumption that it is larger than the maximum message size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list variable list of arguments for formatting. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the send was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="882" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="882" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ad1105eb4982adb37e11845d06041f8fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vrpcRecv</definition>
        <argsstring>(psiRpc_t rpc, va_list ap)</argsstring>
        <name>vrpcRecv</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Receive and parse a message from an RPC input queue. Receive a message from the input queue under the assumption that it is larger than the maximum message size. Then parse the message using the input queue format string to extract parameters and assign them to the arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list variable list of arguments that should be assigned parameters extracted using the format string. Since these will be assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the receive was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="901" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="901" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1acfcbce1dbf8b4ffb62877d5ea759685b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rpcSend</definition>
        <argsstring>(psiRpc_t rpc,...)</argsstring>
        <name>rpcSend</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format and send a message to an RPC output queue. Format provided arguments using the output queue format string and then sends it to the output queue under the assumption that it is larger than the maximum message size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for formatting. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the send was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="917" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="917" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ad093c184b82e34b84b6d4cb5aaf333e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rpcRecv</definition>
        <argsstring>(psiRpc_t rpc,...)</argsstring>
        <name>rpcRecv</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Receive and parse a message from an RPC input queue. Receive a message from the input queue under the assumption that it is larger than the maximum message size. Then parse the message using the input queue format string to extract parameters and assign them to the arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">...</parametername>
</parameternamelist>
<parameterdescription>
<para>mixed arguments that should be assigned parameters extracted using the format string. Since these will be assigned, they should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the receive was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="939" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="939" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a2255bb46149b2f3c591b0f083d409c71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vrpcCall</definition>
        <argsstring>(psiRpc_t rpc, va_list ap)</argsstring>
        <name>vrpcCall</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Send request to an RPC server from the client and wait for a response. Format arguments using the output queue format string, send the message to the output queue, receive a response from the input queue, and assign arguments from the message using the input queue format string to parse it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list mixed arguments that include those that should be formatted using the output format string, followed by those that should be assigned parameters extracted using the input format string. These that will be assigned should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the receive was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="961" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="961" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a04c802f77523e4eaa3fee628cca25c9a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rpcCall</definition>
        <argsstring>(psiRpc_t rpc,...)</argsstring>
        <name>rpcCall</name>
        <param>
          <type><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref></type>
          <declname>rpc</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Send request to an RPC server from the client and wait for a response. Format arguments using the output queue format string, send the message to the output queue, receive a response from the input queue, and assign arguments from the message using the input queue format string to parse it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> structure with RPC information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">...</parametername>
</parameternamelist>
<parameterdescription>
<para>mixed arguments that include those that should be formatted using the output format string, followed by those that should be assigned parameters extracted using the input format string. These that will be assigned should be pointers to memory that has already been allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer specifying if the receive was succesful. Values &gt;= 0 indicate success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="994" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="994" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a917731ab30c9dd7c0a9591ba196dcc79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref></type>
        <definition>static psiAsciiFileOutput_t psiAsciiFileOutput</definition>
        <argsstring>(const char *name, int dst_type)</argsstring>
        <name>psiAsciiFileOutput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_type</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref>. Based on the value of dst_type, either a local file will be opened for output (dst_type == 0), or a <ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref> connection will be made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to path of local file or name of an output queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_type</parametername>
</parameternamelist>
<parameterdescription>
<para>int 0 if name refers to a local file, 1 if it is a queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> for line-by-line output to a file or channel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1077" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1077" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ac54c1ff2d66273861b8e02a7dacb1302" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref></type>
        <definition>static psiAsciiFileInput_t psiAsciiFileInput</definition>
        <argsstring>(const char *name, int src_type)</argsstring>
        <name>psiAsciiFileInput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_type</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref>. Based on the value of src_type, either a local file will be opened for input (src_type == 0), or a <ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref> connection will be made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to path of local file or name of an input queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_type</parametername>
</parameternamelist>
<parameterdescription>
<para>int 0 if name refers to a local file, 1 if it is a queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> for line-by-line input from a file or channel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1107" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1107" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a781fa4a456e4aaaeb0b11027cb24cea4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int is_eof</definition>
        <argsstring>(const char *buf)</argsstring>
        <name>is_eof</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check if a character array matches the internal EOF message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to string that should be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 1 if buf is the EOF message, 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1133" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1133" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1abe3312664b4993842c1d3204e7868bc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_send_eof</definition>
        <argsstring>(psiAsciiFileOutput_t t)</argsstring>
        <name>af_send_eof</name>
        <param>
          <type><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Send EOF message to output file, closing it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send was succesfull. All other values indicate errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1146" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1146" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a1215a6e22752ab11faf4d6c2ebdd0866" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_recv_line</definition>
        <argsstring>(psiAsciiFileInput_t t, char *line, size_t n)</argsstring>
        <name>af_recv_line</name>
        <param>
          <type><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Receive a single line from an associated file or queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">line</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to allocate memory where the received line should be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">n</parametername>
</parameternamelist>
<parameterdescription>
<para>size_t Size of the allocated memory block in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of bytes read/received. Negative values indicate that there was either an error or the EOF message was received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1162" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1162" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a28d01084311f996391fee723c864d061" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_send_line</definition>
        <argsstring>(psiAsciiFileOutput_t t, char *line)</argsstring>
        <name>af_send_line</name>
        <param>
          <type><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Send a single line to a file or queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to line that should be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send was succesfull. Other values indicate errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1183" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1183" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5e90aead7c30fca2909d85752a3cd7f6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_pafi</definition>
        <argsstring>(psiAsciiFileInput_t *t)</argsstring>
        <name>cleanup_pafi</name>
        <param>
          <type><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deallocate and clean up <ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref> pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1198" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1198" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aa51b6fe75eabbf7e216d86f4890f48f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_pafo</definition>
        <argsstring>(psiAsciiFileOutput_t *t)</argsstring>
        <name>cleanup_pafo</name>
        <param>
          <type><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deallocate and clean up <ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref> pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1207" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1207" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aec97c695c821f56969ce3c2e9fe9650a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
        <definition>static psiAsciiTableOutput_t psiAsciiTableOutput</definition>
        <argsstring>(const char *name, char *format_str, int dst_type)</argsstring>
        <name>psiAsciiTableOutput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_type</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to local file path or message queue name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format_str</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to format string that should be used to format rows into table lines. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_type</parametername>
</parameternamelist>
<parameterdescription>
<para>int 0 if name is a local file path, 1 if it is the name of a message queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1332" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1332" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a49661a7659925bf5993f706cb56dbdd1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
        <definition>static psiAsciiTableInput_t psiAsciiTableInput</definition>
        <argsstring>(const char *name, int src_type)</argsstring>
        <name>psiAsciiTableInput</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_type</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>constant character pointer to local file path or message queue name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_type</parametername>
</parameternamelist>
<parameterdescription>
<para>int 0 if name is a local file path, 1 if it is the name of a message queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1373" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1373" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a9566c8f7b1fccf0af7e33a1293f80081" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_psi_send</definition>
        <argsstring>(psiAsciiTableOutput_t t, char *data, int len)</argsstring>
        <name>at_psi_send</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Send a nolimit message to a table output queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to message that should be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of message to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1410" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1410" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aea1f30cb5ff40e675ce50331d9652668" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_psi_recv</definition>
        <argsstring>(psiAsciiTableInput_t t, char **data, int len)</argsstring>
        <name>at_psi_recv</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Recv a nolimit message from a table input queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>character pointer to message that should be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>int length of message to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received. Length of the received message if message was received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1423" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1423" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1af937091e584302eb59449038d82ada18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_send_eof</definition>
        <argsstring>(psiAsciiTableOutput_t t)</argsstring>
        <name>at_send_eof</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Send a nolimit EOF message to a table output queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1433" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1433" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5b207253f4895dc56e2058e8a3b7086e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vsend_row</definition>
        <argsstring>(psiAsciiTableOutput_t t, va_list ap)</argsstring>
        <name>vsend_row</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Format and send a row to the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list Row elements that should be formatted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1446" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1446" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1aeb20cd14e063bab6fb2f928277edd1e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vrecv_row</definition>
        <argsstring>(psiAsciiTableInput_t t, va_list ap)</argsstring>
        <name>vrecv_row</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Recv and parse a row from the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list Pointers to memory where variables from the parsed should be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or parsed, otherwise the length of the received is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1465" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1465" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5a95696e516874a295708bf542aa6b6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_send_row</definition>
        <argsstring>(psiAsciiTableOutput_t t,...)</argsstring>
        <name>at_send_row</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format and send a row to the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Row elements that should be formatted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1482" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1482" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a484947b9a14a2b389a06017ca3de8780" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_recv_row</definition>
        <argsstring>(psiAsciiTableInput_t t,...)</argsstring>
        <name>at_recv_row</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Recv and parse a row from the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers to memory where variables from the parsed row should be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 if message could not be received or parsed, otherwise the length of the received is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1500" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1500" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1adf0b479a6802e9bbb5af57a2719531a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vsend_array</definition>
        <argsstring>(psiAsciiTableOutput_t t, int nrows, va_list ap)</argsstring>
        <name>vsend_array</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Format and send table columns to the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nrows</parametername>
</parameternamelist>
<parameterdescription>
<para>int Number of rows in the columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list Pointers to memory containing table columns that should be formatted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1518" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1518" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a668a05184bc722e4457d8bb6f6ae4f90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int vrecv_array</definition>
        <argsstring>(psiAsciiTableInput_t t, va_list ap)</argsstring>
        <name>vrecv_array</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Recv and parse columns from a table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list Pointers to pointers to memory where columns from the parsed table should be stored. They need not be allocated, only declared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of rows received. Negative values indicate errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1548" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1548" bodyend="1565"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a5e2748762090b002b2e97d4897d00cf7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_send_array</definition>
        <argsstring>(psiAsciiTableOutput_t t, int nrows,...)</argsstring>
        <name>at_send_array</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format and send table columns to the table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> output structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nrows</parametername>
</parameternamelist>
<parameterdescription>
<para>int Number of rows in the columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers to memory containing table columns that should be formatted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if send succesfull, -1 if send unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1576" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1576" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ad090f4eeaa1e713d5f9ca8e981c59795" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int at_recv_array</definition>
        <argsstring>(psiAsciiTableInput_t t,...)</argsstring>
        <name>at_recv_array</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Recv and parse columns from a table file/queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> input structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers to pointers to memory where columns from the parsed table should be stored. They need not be allocated, only declared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of rows received. Negative values indicate errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1593" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1593" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1a564ea635f9719212e5b8f86a059f3400" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_pati</definition>
        <argsstring>(psiAsciiTableInput_t *t)</argsstring>
        <name>cleanup_pati</name>
        <param>
          <type><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deallocate and clean up <ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref> pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1607" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1607" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="_psi_interface_8h_1ae9925e7ba21c29ef492e8960cf53540b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_pato</definition>
        <argsstring>(psiAsciiTableOutput_t *t)</argsstring>
        <name>cleanup_pato</name>
        <param>
          <type><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deallocate and clean up <ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref> pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="1619" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="1619" bodyend="1622"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>O_*<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>mode<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/msg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/sem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/shm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;../dataio/AsciiFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;../dataio/AsciiTable.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSI_MSG_MAX<sp/>1024*2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSI_MSG_EOF<sp/>&quot;EOF!!!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>track<sp/>256<sp/>channels<sp/>in<sp/>use-<sp/>fail<sp/>if<sp/>re-using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max<sp/>#<sp/>channels<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_psiTrackChannels<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>_psiChannelNames[_psiTrackChannels];<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_psiChannelsUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_formats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt_str)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)fmt_str;<sp/>(s<sp/>=<sp/>strstr(s,<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">));<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s++;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c++;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>psiLog(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>%d:<sp/>&quot;</highlight><highlight class="normal">,<sp/>prefix,<sp/>getpid());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>vfprintf(stdout,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>psiInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>psiLog(</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>psiDebug(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>psiLog(</highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>psiError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>psiLog(</highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>error<sp/>psiError</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PSI_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PSI_DEBUG<sp/>==<sp/>INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>info<sp/>psiInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>debug<sp/>while<sp/>(0)<sp/>psiDebug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>PSI_DEBUG<sp/>==<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>debug<sp/>psiInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>info<sp/>psiDebug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>debug<sp/>while<sp/>(0)<sp/>psiDebug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>info<sp/>while<sp/>(0)<sp/>psiInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>debug<sp/>while<sp/>(0)<sp/>psiDebug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>info<sp/>while<sp/>(0)<sp/>psiInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_mq(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*yamlName){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>up<sp/>registered<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*qid<sp/>=<sp/>getenv(name);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>if<sp/>the<sp/>driver<sp/>did<sp/>not<sp/>declare<sp/>the<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qid<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_mq:<sp/>Channel<sp/>%s<sp/>not<sp/>registered,<sp/>model/YAML<sp/>mismatch<sp/>(yaml=%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>yamlName);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>opposite<sp/>channel<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nm_opp[512];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(nm_opp,<sp/>yamlName);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(name+strlen(yamlName),<sp/></highlight><highlight class="stringliteral">&quot;_IN&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat(nm_opp,<sp/></highlight><highlight class="stringliteral">&quot;_OUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat(nm_opp,<sp/></highlight><highlight class="stringliteral">&quot;_IN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>qid<sp/>=<sp/>getenv(nm_opp);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qid<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_mq:<sp/>Directed<sp/>channel<sp/>%s<sp/>exists,<sp/>but<sp/>requested<sp/>channel<sp/>%s<sp/>does<sp/>not\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm_opp,<sp/>name);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>if<sp/>trying<sp/>to<sp/>re-use<sp/>the<sp/>same<sp/>channel<sp/>twice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i<sp/>&lt;<sp/>_psiChannelsUsed;<sp/>i++<sp/>){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(_psiChannelNames[i],<sp/>name)){</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>re-use<sp/>channel<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>if<sp/>&gt;<sp/>_psiTrackChannels<sp/>channels<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_psiChannelsUsed<sp/>&gt;=<sp/>_psiTrackChannels)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>channels<sp/>in<sp/>use,<sp/>max:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>_psiTrackChannels);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>_psiChannelNames[_psiChannelsUsed++]<sp/>=<sp/>qid;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qkey<sp/>=<sp/>atoi(qid);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fid<sp/>=<sp/>msgget(qkey,<sp/>0600);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fid;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="structmsgbuf__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmsgbuf__t" kindref="compound">msgbuf_t</ref><sp/>{</highlight></codeline>
<codeline lineno="209" refid="structmsgbuf__t_1a94084fefd8e8fb9a97ad4aab296ca9c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structmsgbuf__t_1a94084fefd8e8fb9a97ad4aab296ca9c4" kindref="member">mtype</ref>;<sp/></highlight></codeline>
<codeline lineno="210" refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" kindref="member">data</ref>[PSI_MSG_MAX];<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}<sp/><ref refid="structmsgbuf__t" kindref="compound">msgbuf_t</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structpsi_input__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="218" refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" kindref="member">_handle</ref>;<sp/></highlight></codeline>
<codeline lineno="219" refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="220" refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>;<sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal">}<sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="structpsi_output__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="228" refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" kindref="member">_handle</ref>;<sp/></highlight></codeline>
<codeline lineno="229" refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="230" refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref>;<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}<sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiOutput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nm[512];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>strcpy(nm,<sp/>name);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>strcat(nm,<sp/></highlight><highlight class="stringliteral">&quot;_OUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" kindref="member">_handle</ref><sp/>=<sp/>psi_mq(nm,<sp/>name);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiInput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nm[512];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>strcpy(nm,<sp/>name);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>strcat(nm,<sp/></highlight><highlight class="stringliteral">&quot;_IN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" kindref="member">_handle</ref><sp/>=<sp/><sp/>psi_mq(nm,<sp/>name);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psi_output(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psiOutput(name);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psi_input(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psiInput(name);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiOutputFmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmtString){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>ret<sp/>=<sp/>psiOutput(name);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref><sp/>=<sp/>fmtString;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiInputFmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmtString){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>ret<sp/>=<sp/>psiInput(name);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>ret.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref><sp/>=<sp/>fmtString;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_output_nmsg(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">msqid_ds<sp/>buf;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_messages;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>msgctl(psiQ.<ref refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" kindref="member">_handle</ref>,<sp/>IPC_STAT,<sp/>&amp;buf);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_output_nmsg:<sp/>Could<sp/>not<sp/>access<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>num_messages<sp/>=<sp/>buf.msg_qnum;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_messages;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_input_nmsg(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">msqid_ds<sp/>buf;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_messages;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>msgctl(psiQ.<ref refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" kindref="member">_handle</ref>,<sp/>IPC_STAT,<sp/>&amp;buf);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_input_nmsg:<sp/>Could<sp/>not<sp/>access<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>num_messages<sp/>=<sp/>buf.msg_qnum;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_messages;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_send(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len){</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send(%s):<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>PSI_MSG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_send(%s):<sp/>message<sp/>too<sp/>large<sp/>for<sp/>single<sp/>packet<sp/>(PSI_MSG_MAX=%d,<sp/>len=%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>PSI_MSG_MAX,<sp/>len);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="structmsgbuf__t" kindref="compound">msgbuf_t</ref><sp/>t;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>t.<ref refid="structmsgbuf__t_1a94084fefd8e8fb9a97ad4aab296ca9c4" kindref="member">mtype</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>memcpy(t.<ref refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" kindref="member">data</ref>,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>msgsnd(psiQ.<ref refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" kindref="member">_handle</ref>,<sp/>&amp;t,<sp/>len,<sp/>IPC_NOWAIT);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send(%s):<sp/>msgsnd<sp/>returned<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>EAGAIN)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send(%s):<sp/>msgsnd,<sp/>sleep&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usleep(250*1000);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_send:<sp/><sp/>msgsend(%d,<sp/>%p,<sp/>%d,<sp/>IPC_NOWAIT)<sp/>ret(%d),<sp/>errno(%d):<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_output__t_1a9ad7d02cf677183308724c7f9b8dbd52" kindref="member">_handle</ref>,<sp/>&amp;t,<sp/>len,<sp/>ret,<sp/>errno,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send(%s):<sp/>returning<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_recv(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len){</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv(%s)&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="structmsgbuf__t" kindref="compound">msgbuf_t</ref><sp/>t;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>t.<ref refid="structmsgbuf__t_1a94084fefd8e8fb9a97ad4aab296ca9c4" kindref="member">mtype</ref>=1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>msgrcv(psiQ.<ref refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" kindref="member">_handle</ref>,<sp/>&amp;t,<sp/>len,<sp/>0,<sp/>IPC_NOWAIT);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>ENOMSG)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv(%s):<sp/>no<sp/>input,<sp/>sleep&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usleep(250*1000);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv(%s):<sp/>received<sp/>input:<sp/>%d<sp/>bytes,<sp/>ret=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>strlen(t.<ref refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" kindref="member">data</ref>),<sp/>ret);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/>t.<ref refid="structmsgbuf__t_1a62a89bab39a8dbb90340eb22ef953ba1" kindref="member">data</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>data[ret]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv:<sp/><sp/>msgrecv(%d,<sp/>%p,<sp/>%d,<sp/>0,<sp/>IPC_NOWAIT:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1a21f6897a7e84d4e62099293203c08225" kindref="member">_handle</ref>,<sp/>&amp;t,<sp/>len,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv(%s):<sp/>returns<sp/>%d<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_send_nolimit(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send_nolimit(%s):<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgsiz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[PSI_MSG_MAX];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>sprintf(msg,<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(len));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>psi_send(psiQ,<sp/>msg,<sp/>strlen(msg));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send_nolimit(%s):<sp/>sending<sp/>size<sp/>of<sp/>payload<sp/>failed.&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prev<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>-<sp/>prev)<sp/>&gt;<sp/>PSI_MSG_MAX)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msgsiz<sp/>=<sp/>PSI_MSG_MAX;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msgsiz<sp/>=<sp/>len<sp/>-<sp/>prev;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_send(psiQ,<sp/>data<sp/>+<sp/>prev,<sp/>msgsiz);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send_nolimit(%s):<sp/>send<sp/>interupted<sp/>at<sp/>%d<sp/>of<sp/>%d<sp/>bytes.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>prev,<sp/>len);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>+=<sp/>msgsiz;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send_nolimit(%s):<sp/>%d<sp/>of<sp/>%d<sp/>bytes<sp/>sent&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>prev,<sp/>len);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_send_nolimit(%s):<sp/>%d<sp/>bytes<sp/>completed&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psi_recv_nolimit(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len0){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s)&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msgsiz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[PSI_MSG_MAX];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>psi_recv(psiQ,<sp/>msg,<sp/>PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s):<sp/>failed<sp/>to<sp/>receive<sp/>payload<sp/>size.&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>sscanf(msg,<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s):<sp/>failed<sp/>to<sp/>parse<sp/>payload<sp/>size<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>msg);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reallocate<sp/>data<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>len0)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)realloc(*data,<sp/>len);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prev<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len<sp/>-<sp/>prev)<sp/>&gt;<sp/>PSI_MSG_MAX)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msgsiz<sp/>=<sp/>PSI_MSG_MAX;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msgsiz<sp/>=<sp/>len<sp/>-<sp/>prev;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_recv(psiQ,<sp/>(*data)<sp/>+<sp/>prev,<sp/>msgsiz);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s):<sp/>recv<sp/>interupted<sp/>at<sp/>%d<sp/>of<sp/>%d<sp/>bytes.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>prev,<sp/>len);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>+=<sp/>ret;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s):<sp/>%d<sp/>of<sp/>%d<sp/>bytes<sp/>received&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>prev,<sp/>len);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;psi_recv_nolimit(%s):<sp/>%d<sp/>bytes<sp/>completed&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>prev);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="564"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vpsiSend(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[PSI_MSG_MAX];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vsnprintf(buf,<sp/>PSI_MSG_MAX,<sp/>psiQ.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiSend(%s):<sp/>vsnprintf<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiSend(%s):<sp/>vsnprintf<sp/>encoding<sp/>error&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>PSI_MSG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiSend(%s):<sp/>encoded<sp/>message<sp/>too<sp/>large.<sp/>(PSI_MSG_MAX=%d,<sp/>len=%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>PSI_MSG_MAX,<sp/>ret);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>psi_send(psiQ,<sp/>buf,<sp/>ret);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiSend(%s):<sp/>psi_send<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vpsiRecv(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[PSI_MSG_MAX];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>psi_recv(psiQ,<sp/>buf,<sp/>PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiRecv(%s):<sp/>Error<sp/>receiving.&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiRecv(%s):<sp/>psi_recv<sp/>returns<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>ret,<sp/>buf);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nexp<sp/>=<sp/>count_formats(psiQ.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sret<sp/>=<sp/>vsscanf(buf,<sp/>psiQ.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sret<sp/>!=<sp/>nexp)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiRecv(%s):<sp/>vsscanf<sp/>filled<sp/>%d<sp/>variables,<sp/>but<sp/>there<sp/>are<sp/>%d<sp/>formats&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>sret,<sp/>nexp);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiRecv(%s):<sp/>vsscanf<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>sret);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psiSend(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/>...){</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>psiQ.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiSend(psiQ,<sp/>ap);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psiRecv(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/>...){</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>psiQ.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiRecv(psiQ,<sp/>ap);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">};</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vpsiSend_nolimit(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vsnprintf(buf,<sp/>PSI_MSG_MAX,<sp/>psiQ.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiSend_nolimit(%s):<sp/>vsnprintf<sp/>encoding<sp/>error&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>PSI_MSG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)realloc(buf,<sp/>ret+1);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>vsnprintf(buf,<sp/>ret,<sp/>psiQ.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiSend_nolimit(%s):<sp/>vsnprintf<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>psi_send_nolimit(psiQ,<sp/>buf,<sp/>ret);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiSend_nolimit(%s):<sp/>psi_send_nolimit<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_output__t_1aee98b6f91ada5813222b6d0e70ee5223" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">};</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vpsiRecv_nolimit(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>psi_recv_nolimit(psiQ,<sp/>&amp;buf,<sp/>PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiRecv_nolimit(%s):<sp/>Error<sp/>receiving.&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiRecv_nolimit(%s):<sp/>psi_recv<sp/>returns<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>ret,<sp/>buf);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nexp<sp/>=<sp/>count_formats(psiQ.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sret<sp/>=<sp/>vsscanf(buf,<sp/>psiQ.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sret<sp/>!=<sp/>nexp)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;vpsiRecv_nolimit(%s):<sp/>vsscanf<sp/>filled<sp/>%d<sp/>variables,<sp/>but<sp/>there<sp/>are<sp/>%d<sp/>formats&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>sret,<sp/>nexp);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;vpsiRecv_nolimit(%s):<sp/>vsscanf<sp/>returns<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>psiQ.<ref refid="structpsi_input__t_1af043731e8bd403a4b6daa6d2dfc0bfbb" kindref="member">_name</ref>,<sp/>ret);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">};</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psiSend_nolimit(<ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/>psiQ,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>psiQ);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiSend_nolimit(psiQ,<sp/>ap);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">};</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psiRecv_nolimit(<ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/>psiQ,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>psiQ);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiRecv_nolimit(psiQ,<sp/>ap);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="803"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="structpsi_rpc__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>{</highlight></codeline>
<codeline lineno="811" refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/><ref refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" kindref="member">_input</ref>;<sp/></highlight></codeline>
<codeline lineno="812" refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/><ref refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" kindref="member">_output</ref>;<sp/></highlight></codeline>
<codeline lineno="813" refid="structpsi_rpc__t_1a31c6a55cda7c12d643fbe358e429c207" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_rpc__t_1a31c6a55cda7c12d643fbe358e429c207" kindref="member">_inFmt</ref>;<sp/></highlight></codeline>
<codeline lineno="814" refid="structpsi_rpc__t_1a5f04717309ffe83b639b459d5052ea19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_rpc__t_1a5f04717309ffe83b639b459d5052ea19" kindref="member">_outFmt</ref>;<sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal">}<sp/><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref>;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>psiRpc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outFormat,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inFormat){</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>rpc.<ref refid="structpsi_rpc__t_1a31c6a55cda7c12d643fbe358e429c207" kindref="member">_inFmt</ref><sp/>=<sp/>inFormat;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>rpc.<ref refid="structpsi_rpc__t_1a5f04717309ffe83b639b459d5052ea19" kindref="member">_outFmt</ref><sp/>=<sp/>outFormat;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>rpc.<ref refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" kindref="member">_input</ref><sp/>=<sp/>psiInputFmt(inName,<sp/>inFormat);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>rpc.<ref refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" kindref="member">_output</ref><sp/>=<sp/>psiOutputFmt(outName,<sp/>outFormat);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rpc;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">};</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>psiRpcClient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outFormat,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inFormat){</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc<sp/>=<sp/>psiRpc(name,<sp/>outFormat,<sp/>name,<sp/>inFormat);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rpc;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">};</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>psiRpcServer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inFormat,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outFormat){</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc<sp/>=<sp/>psiRpc(name,<sp/>outFormat,<sp/>name,<sp/>inFormat);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rpc;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">};</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vrpcSend(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiSend_nolimit(rpc.<ref refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" kindref="member">_output</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vrpcRecv(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vpsiRecv_nolimit(rpc.<ref refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" kindref="member">_input</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">};</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rpcSend(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/>...){</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>rpc);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vrpcSend(rpc,<sp/>ap);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rpcRecv(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/>...){</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>rpc);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>vrpcRecv(rpc,<sp/>ap);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="945"><highlight class="normal">};</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vrpcCall(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pack<sp/>the<sp/>args<sp/>and<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vpsiSend_nolimit(rpc.<ref refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" kindref="member">_output</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vrpcCall:<sp/>vpsiSend_nolimit<sp/>error:<sp/>ret<sp/>%d:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ret,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unpack<sp/>the<sp/>messages<sp/>into<sp/>the<sp/>remaining<sp/>variable<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>va_list<sp/>op;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>va_copy(op,<sp/>ap);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vpsiRecv_nolimit(rpc.<ref refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" kindref="member">_input</ref>,<sp/>op);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>va_end(op);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">};</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rpcCall(<ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref><sp/>rpc,<sp/><sp/>...){</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>rpc);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vrpcCall(rpc,<sp/>ap);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048" refid="structpsi_ascii_file_output__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1049" refid="structpsi_ascii_file_output__t_1ac51edcdaa6634876c15272f23378396d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_file_output__t_1ac51edcdaa6634876c15272f23378396d" kindref="member">_valid</ref>;<sp/></highlight></codeline>
<codeline lineno="1050" refid="structpsi_ascii_file_output__t_1a01a4cb8af6e9d321b323224b37b598f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_ascii_file_output__t_1a01a4cb8af6e9d321b323224b37b598f8" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="1051" refid="structpsi_ascii_file_output__t_1a58ecf3b6fcd296419931dc920d139d72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_file_output__t_1a58ecf3b6fcd296419931dc920d139d72" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1052" refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" refkind="member"><highlight class="normal"><sp/><sp/>AsciiFile<sp/><ref refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" kindref="member">_file</ref>;<sp/></highlight></codeline>
<codeline lineno="1053" refid="structpsi_ascii_file_output__t_1a3253fef4940536b8fc4260bad6418cdd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/><ref refid="structpsi_ascii_file_output__t_1a3253fef4940536b8fc4260bad6418cdd" kindref="member">_psi</ref>;<sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}<sp/><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref>;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059" refid="structpsi_ascii_file_input__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1060" refid="structpsi_ascii_file_input__t_1aff62f1ab107455f11afa8639678e9cf8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_file_input__t_1aff62f1ab107455f11afa8639678e9cf8" kindref="member">_valid</ref>;<sp/></highlight></codeline>
<codeline lineno="1061" refid="structpsi_ascii_file_input__t_1aedbc53e8d193c4f3183bb4568f924d19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_ascii_file_input__t_1aedbc53e8d193c4f3183bb4568f924d19" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="1062" refid="structpsi_ascii_file_input__t_1ad438b6a4ccf9870a4fb071c242cd1f9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_file_input__t_1ad438b6a4ccf9870a4fb071c242cd1f9c" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1063" refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" refkind="member"><highlight class="normal"><sp/><sp/>AsciiFile<sp/><ref refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" kindref="member">_file</ref>;<sp/></highlight></codeline>
<codeline lineno="1064" refid="structpsi_ascii_file_input__t_1a2b73b8fc2edb902484257337096573d9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/><ref refid="structpsi_ascii_file_input__t_1a2b73b8fc2edb902484257337096573d9" kindref="member">_psi</ref>;<sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}<sp/><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref>;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>psiAsciiFileOutput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_type)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>out;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1a01a4cb8af6e9d321b323224b37b598f8" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1a58ecf3b6fcd296419931dc920d139d72" kindref="member">_type</ref><sp/>=<sp/>dst_type;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1ac51edcdaa6634876c15272f23378396d" kindref="member">_valid</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_type<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" kindref="member">_file</ref><sp/>=<sp/>ascii_file(name,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>af_open(&amp;(out.<ref refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" kindref="member">_file</ref>));</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_file_output:<sp/>Could<sp/>not<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1ac51edcdaa6634876c15272f23378396d" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1a3253fef4940536b8fc4260bad6418cdd" kindref="member">_psi</ref><sp/>=<sp/>psiOutput(name);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" kindref="member">_file</ref><sp/>=<sp/>ascii_file(name,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref><sp/>psiAsciiFileInput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_type)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref><sp/>out;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1aedbc53e8d193c4f3183bb4568f924d19" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1ad438b6a4ccf9870a4fb071c242cd1f9c" kindref="member">_type</ref><sp/>=<sp/>src_type;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1aff62f1ab107455f11afa8639678e9cf8" kindref="member">_valid</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_type<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>file<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" kindref="member">_file</ref><sp/>=<sp/>ascii_file(name,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>af_open(&amp;(out.<ref refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" kindref="member">_file</ref>));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_file_input:<sp/>Could<sp/>not<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1aff62f1ab107455f11afa8639678e9cf8" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1a2b73b8fc2edb902484257337096573d9" kindref="member">_psi</ref><sp/>=<sp/>psiInput(name);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" kindref="member">_file</ref><sp/>=<sp/>ascii_file(name,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_eof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf)<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(buf,<sp/>PSI_MSG_EOF)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_send_eof(<ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[PSI_MSG_MAX]<sp/>=<sp/>PSI_MSG_EOF;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>psi_send(t.<ref refid="structpsi_ascii_file_output__t_1a3253fef4940536b8fc4260bad6418cdd" kindref="member">_psi</ref>,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_recv_line(<ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_file_input__t_1ad438b6a4ccf9870a4fb071c242cd1f9c" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>af_readline_full(t.<ref refid="structpsi_ascii_file_input__t_1a67d8b1356fd726bf4ea10d023b60b8cc" kindref="member">_file</ref>,<sp/>&amp;line,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_recv(t.<ref refid="structpsi_ascii_file_input__t_1a2b73b8fc2edb902484257337096573d9" kindref="member">_psi</ref>,<sp/>line,<sp/>n);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_eof(line))</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_send_line(<ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_file_output__t_1a58ecf3b6fcd296419931dc920d139d72" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>af_writeline_full(t.<ref refid="structpsi_ascii_file_output__t_1a6e33955b27878e6bb3d959b995258c92" kindref="member">_file</ref>,<sp/>line);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_send(t.<ref refid="structpsi_ascii_file_output__t_1a3253fef4940536b8fc4260bad6418cdd" kindref="member">_psi</ref>,<sp/>line,<sp/>strlen(line));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_pafi(<ref refid="structpsi_ascii_file_input__t" kindref="compound">psiAsciiFileInput_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>af_close(&amp;((*t)._file));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_pafo(<ref refid="structpsi_ascii_file_output__t" kindref="compound">psiAsciiFileOutput_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>af_close(&amp;((*t)._file));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302" refid="structpsi_ascii_table_output__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1303" refid="structpsi_ascii_table_output__t_1a787f59c8e7319c437d7458d6470654c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_table_output__t_1a787f59c8e7319c437d7458d6470654c6" kindref="member">_valid</ref>;<sp/></highlight></codeline>
<codeline lineno="1304" refid="structpsi_ascii_table_output__t_1aaccb8efb45387db8b563062beca99825" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_ascii_table_output__t_1aaccb8efb45387db8b563062beca99825" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="1305" refid="structpsi_ascii_table_output__t_1a2faf1afb6a1d4410a902d2c2074a8ea9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_table_output__t_1a2faf1afb6a1d4410a902d2c2074a8ea9" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1306" refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" refkind="member"><highlight class="normal"><sp/><sp/>AsciiTable<sp/><ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref>;<sp/></highlight></codeline>
<codeline lineno="1307" refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref><sp/><ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>;<sp/></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">}<sp/><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref>;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313" refid="structpsi_ascii_table_input__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1314" refid="structpsi_ascii_table_input__t_1a017354004fcb6727848031898d572136" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_table_input__t_1a017354004fcb6727848031898d572136" kindref="member">_valid</ref>;<sp/></highlight></codeline>
<codeline lineno="1315" refid="structpsi_ascii_table_input__t_1afd75b93efee18f35d9d14960254dcc0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structpsi_ascii_table_input__t_1afd75b93efee18f35d9d14960254dcc0c" kindref="member">_name</ref>;<sp/></highlight></codeline>
<codeline lineno="1316" refid="structpsi_ascii_table_input__t_1a05fe77a32bb1f2457df4e190ae1e4dd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpsi_ascii_table_input__t_1a05fe77a32bb1f2457df4e190ae1e4dd7" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1317" refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" refkind="member"><highlight class="normal"><sp/><sp/>AsciiTable<sp/><ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref>;<sp/></highlight></codeline>
<codeline lineno="1318" refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref><sp/><ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>;<sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}<sp/><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref>;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>psiAsciiTableOutput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format_str,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_type)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>out;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a787f59c8e7319c437d7458d6470654c6" kindref="member">_valid</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1aaccb8efb45387db8b563062beca99825" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a2faf1afb6a1d4410a902d2c2074a8ea9" kindref="member">_type</ref><sp/>=<sp/>dst_type;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_type<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref><sp/>=<sp/>ascii_table(name,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>format_str,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_open(&amp;(out.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref>));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_table_output:<sp/>Could<sp/>not<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a787f59c8e7319c437d7458d6470654c6" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>at_writeformat(out.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref><sp/>=<sp/>psiOutput(name);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_send(out.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>format_str,<sp/>strlen(format_str));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_table_input:<sp/>Failed<sp/>to<sp/>receive<sp/>format<sp/>string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a787f59c8e7319c437d7458d6470654c6" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref><sp/>=<sp/>ascii_table(name,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>format_str,</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>.<ref refid="structpsi_output__t_1ab0d091406566578aff30e29f8f254dc0" kindref="member">_fmt</ref><sp/>=<sp/>format_str;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>psiAsciiTableInput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_type)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>out;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a017354004fcb6727848031898d572136" kindref="member">_valid</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1afd75b93efee18f35d9d14960254dcc0c" kindref="member">_name</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a05fe77a32bb1f2457df4e190ae1e4dd7" kindref="member">_type</ref><sp/>=<sp/>src_type;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_type<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>file<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref><sp/>=<sp/>ascii_table(name,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>NULL,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_open(&amp;(out.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref>));</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_table_input:<sp/>Could<sp/>not<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a017354004fcb6727848031898d572136" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref><sp/>=<sp/>psiInput(name);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_recv(out.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>,<sp/>out.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>,<sp/>PSI_MSG_MAX);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;psi_ascii_table_input:<sp/>Failed<sp/>to<sp/>receive<sp/>format<sp/>string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1a017354004fcb6727848031898d572136" kindref="member">_valid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref><sp/>=<sp/>ascii_table(name,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>out.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>.<ref refid="structpsi_input__t_1a4b30391a07118d0fc50315750a04f3fc" kindref="member">_fmt</ref>,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_psi_send(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len){</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi_send_nolimit(t.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1422"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_psi_recv(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len){</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi_recv_nolimit(t.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_send_eof(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[PSI_MSG_MAX]<sp/>=<sp/>PSI_MSG_EOF;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>psi_send_nolimit(t.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vsend_row(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_table_output__t_1a2faf1afb6a1d4410a902d2c2074a8ea9" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_vwriteline(t.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>vpsiSend_nolimit(t.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vrecv_row(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>t,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_table_input__t_1a05fe77a32bb1f2457df4e190ae1e4dd7" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_vreadline(t.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>vpsiRecv_nolimit(t.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>,<sp/>ap);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_send_row(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>t);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vsend_row(t,<sp/>ap);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_recv_row(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>t,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>t);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vrecv_row(t,<sp/>ap);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1517"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vsend_array(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_table_output__t_1a2faf1afb6a1d4410a902d2c2074a8ea9" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>currently<sp/>implemented.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_varray_to_bytes(t.<ref refid="structpsi_ascii_table_output__t_1a48b160ca303b3a7a850d6b093e1d55f8" kindref="member">_table</ref>,<sp/>&amp;data,<sp/>nrows,<sp/>ap);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;Sending<sp/>%d:<sp/>&quot;,<sp/>ret);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fwrite(data,<sp/>ret,<sp/>1,<sp/>stdout);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;\n&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_send_nolimit(t.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>data,<sp/>ret);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[10]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psi_send(t.<ref refid="structpsi_ascii_table_output__t_1a6d499326c0db9a9d50e55dd5c0147141" kindref="member">_psi</ref>,<sp/>buf,<sp/>0);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vrecv_array(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>t,<sp/>va_list<sp/>ap)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.<ref refid="structpsi_ascii_table_input__t_1a05fe77a32bb1f2457df4e190ae1e4dd7" kindref="member">_type</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>currently<sp/>implemented.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_siz<sp/>=<sp/>10*t.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref>.row_siz;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(data_siz);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>psi_recv_nolimit(t.<ref refid="structpsi_ascii_table_input__t_1a0e5c09b570c4bd0b19c1049e0795f258" kindref="member">_psi</ref>,<sp/>&amp;data,<sp/>data_siz);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;Received:<sp/>&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fwrite(data,<sp/>ret,<sp/>1,<sp/>stdout);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;\n&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>at_vbytes_to_array(t.<ref refid="structpsi_ascii_table_input__t_1afa2330c9db3b106b0fc4ad1c0f7c8408" kindref="member">_table</ref>,<sp/>data,<sp/>ret,<sp/>ap);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_send_array(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>t);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vsend_array(t,<sp/>nrows,<sp/>ap);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_recv_array(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>t,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>t);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>vrecv_array(t,<sp/>ap);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_pati(<ref refid="structpsi_ascii_table_input__t" kindref="compound">psiAsciiTableInput_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*t)._type<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>free((*t)._psi._fmt);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>at_close(&amp;((*t)._table));</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>at_cleanup(&amp;((*t)._table));</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_pato(<ref refid="structpsi_ascii_table_output__t" kindref="compound">psiAsciiTableOutput_t</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>at_close(&amp;((*t)._table));</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>at_cleanup(&amp;((*t)._table));</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h"/>
  </compounddef>
</doxygen>
