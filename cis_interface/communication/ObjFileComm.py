from cis_interface.communication.PlyFileComm import PlyFileComm
from cis_interface.schema import register_component
from cis_interface.metaschema.datatypes.ObjMetaschemaType import ObjDict
from cis_interface.serialize.ObjSerialize import ObjSerialize


@register_component
class ObjFileComm(PlyFileComm):
    r"""Class for handling I/O from/to a .obj file on disk.

    Args:
        name (str): The environment variable where communication address is
            stored.
        **kwargs: Additional keywords arguments are passed to parent class.

    """

    _filetype = 'obj'
    _default_serializer = ObjSerialize
    _default_extension = '.obj'

    @classmethod
    def get_testing_options(cls):
        r"""Method to return a dictionary of testing options for this class.

        Returns:
            dict: Dictionary of variables to use for testing. Key/value pairs:
                kwargs (dict): Keyword arguments for comms tested with the
                    provided content.
                send (list): List of objects to send to test file.
                recv (list): List of objects that will be received from a test
                    file that was sent the messages in 'send'.
                contents (bytes): Bytes contents of test file created by sending
                    the messages in 'send'.

        """
        obj = ObjDict({'vertices': [{'x': float(0), 'y': float(0), 'z': float(0)},
                                    {'x': float(0), 'y': float(0), 'z': float(1)},
                                    {'x': float(0), 'y': float(1), 'z': float(1)}],
                       'faces': [[{'vertex_index': int(0)},
                                  {'vertex_index': int(1)},
                                  {'vertex_index': int(2)}]]})
        out = {'kwargs': {},
               'send': [obj, obj],
               'recv': [obj.merge(obj)],
               'contents': (b'# Author cis_auto\n'
                            + b'# Generated by cis_interface\n\n'
                            + b'v 0.0000 0.0000 0.0000\n'
                            + b'v 0.0000 0.0000 1.0000\n'
                            + b'v 0.0000 1.0000 1.0000\n'
                            + b'v 0.0000 0.0000 0.0000\n'
                            + b'v 0.0000 0.0000 1.0000\n'
                            + b'v 0.0000 1.0000 1.0000\n'
                            + b'f 1// 2// 3//\n'
                            + b'f 4// 5// 6//\n')}
        out['msg'] = out['send'][0]
        out['dict'] = {'f0': out['msg']}
        return out
