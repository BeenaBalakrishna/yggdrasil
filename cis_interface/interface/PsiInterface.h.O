
#include <fcntl.h>           /* For O_* constants */
#include <sys/stat.h>        /* For mode constants */
#include <sys/msg.h>
#include <sys/types.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <errno.h>
//
// basic IO and formatted IO support
//
// usage:
//      1. one-time: create input and output channels - holding in varibales
//      2. Prepare:  Output: Format data in buffer, input: allocat buffer
//      3. Call send/receive routines:  
//          ret = psi_send(output_channel, buf, length_of_buf)
//      or
//          ret = psi_recv(input_channel, buf*, length_of_buf)

typedef struct PsiInput {
    int _handle;
    char *_name;
    char *_fmt;
} PsiInput;

typedef struct PsiOutput {
    int _handle ;
    char *_name;
    char *_fmt;
} PsiOutput;

#define BSIZE 8192

typedef struct msgbuf_t {
	long mtype;       
	char data[8192];
} msgbuf_t;


// track 256 channels in use- fail if re-using
// max # channels 
#define _psiTrackChannels 256
static char * _psiChannelNames[_psiTrackChannels]; 
static unsigned _psiChannelsUsed = 0;

static inline
int psi_mq(char *name, char *yamlName){
    // Look up registered name
    char *qid = getenv(name);
    // Fail if the driver did not declare the channel
    if (qid == NULL) {
        fprintf(stderr, "Channel %s not registered, model/YAML mismatch\n", yamlName);
        return -1;
    }
    // Fail if trying to re-use the same channel twice
    for (int i =0; i < _psiChannelsUsed; i++ ){
        if (0 == strcmp(_psiChannelNames[i], name)){
            fprintf(stderr, "ERROR: Attempt to re-use channel %s", name);
            return -1;
        }
    }
    // Fail if > _psiTrackChannels channels used
    if (_psiChannelsUsed >= _psiTrackChannels) {
        fprintf(stderr, "ERROR: too many channels in use, max: %d\n", _psiTrackChannels);
        return -1;
    }
    _psiChannelNames[_psiChannelsUsed++] = qid;
    int qkey = atoi(qid);
    int fid = msgget(qkey, 0600);
    return fid;
};

static inline
PsiOutput psi_output    (char *name){
    char nm[512];
    strcpy(nm, name);
    strcat(nm, "_OUT");
    PsiOutput ret;
    ret._handle = psi_mq(nm, name);
    ret._name = name;
    ret._fmt = 0;
    return ret;
};

static inline
PsiOutput psiSender(char *name, char*fmtString){
    PsiOutput ret = psi_output(name);
    ret._fmt = fmtString;
}

static inline
PsiInput psi_input    (char *name){
    char nm[512];
    strcpy(nm, name);
    strcat(nm, "_IN");
    PsiInput ret;
    ret._handle =  psi_mq(nm, name);
    ret._name = name;
    ret._fmt = 0;
    return ret;
};

static inline
PsiOutput psiReceiver(char *name, char*fmtString){
    PsiOutput ret = psi_output(name);
    ret._fmt = fmtString;
};

static inline
int psi_send(PsiOutput psiQ, char *data, int len){
	msgbuf_t t;
	t.mtype=1;
	memcpy(t.data, data, len);
    int ret = EAGAIN;
    while (EAGAIN == (ret = msgsnd(psiQ._handle, &t, len, IPC_NOWAIT )))
        sleep(1);
    return ret;
};

static inline
int psiSend(PsiOutput psiQ, ...){
    va_list ap;
    va_start(ap, psiQ._fmt);
    char buf[BSIZE];
    int ret = vsnprintf(buf, BSIZE, psiQ._fmt, ap);
    ret = psi_send(psiQ, buf, strlen(buf));
    va_end(ap);
    return ret;
};

static inline
int psi_recv(PsiInput psiQ, char *data, int len){
	msgbuf_t t;
	t.mtype=1;
    int ret = EAGAIN;
    while (EAGAIN == (ret = msgrcv(psiQ._handle, &t, len, 1, IPC_NOWAIT)))
        sleep(1);
    if (ret > 0)
        memcpy(data, t.data, ret);
    return ret;
};

static inline
int psiRecv(PsiInput psiQ, ...){
    va_list ap;
    va_start(ap, psiQ._fmt);
    char buf[BSIZE];
    int ret = psi_recv(psiQ, buf, BSIZE);
    ret = vsscanf(buf, psiQ._fmt, ap);

    va_end(ap);
    return ret;
};




//
// all-in-one send/recv/rpc using format strings like printf
//  creates channel on first call, reuses on subsequent calls
//  returns number of vars sent/received
// 
// Usage: 
//  ret = psi_sendVars(channel_name, format_string,  var1, var2, ...)
//  ret = psi_recvVars(channel_name, format_string, &var1, &var2, ...)
// Example:
//  ret - psi_send("myOutput", "%f %f %d", temp, percentComplete, iteration)
//  
// Usage: pass input and output channel names, a format string  of input and output formats separated by :,
// the output args to send, and the inputs to receive
// The first call initializes the static pseudo-globals
// Probably needs better error reporting to the caller
// See example below

typedef psiRpc_t {
    PsiInput _input;
    PsiOutput _output;
} psiRpc_t;


static inline 
psiRpc_t psiRpc(char *inName, char *inFormat, char *outName, char *outFormat){
    psiRpc_t rpc;
    rpc._input = psiReceiver(inName, inFormat);
    rpc._output = psiSender(outName, outFormat);
    return rpc;
}

static inline
int rpcCall(psiRpc_t rpc,  ...){
    // setup - static variables persist across calls
    char buf[BSIZE];
    static PsiInput input;
    static PsiOutput output;
    static int initialized = 0;
    
    if (!initialized){
        input =  psi_input(inputName);
        output = psi_output(outputName);
        initialized = 1;
    }
    int ret ; // always check return values
    int result = 0; // default result to return

  char *inf  = strdup(formats);
  inf = strsep(&inf, ":");
  char *outf = strdup(formats+strlen(inf)+1);

  // pack the args
  va_list ap;
  va_list op;
  va_start(ap, formats);
  ret = vsnprintf(buf, BSIZE, outf, ap);
  va_copy(op, ap);
  // should return ret here??
  ret = psi_send(output, buf, strlen(buf));
  if (ret != 0){
      printf("psi_send error\n");
      return -1;
  }

  // receive the message
  ret = psi_recv(input, buf, BSIZE);
  if (ret < 0) {
     printf("psi_recv error\n");
     return -1;
    }

    // unpack the messages
  ret = vsscanf(buf, inf, op);
  printf("ret = %d\n", ret);
  va_end(ap);
  va_end(op);

  return 0;
};
