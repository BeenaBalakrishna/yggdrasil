# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

# branches to build
branches:
  # whitelist
  only:
    - topic/windows

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

os: Visual Studio 2015

#---------------------------------#
#    environment configuration    #
#---------------------------------#

environment:

  global:
    PYTHON: "C:\\Miniconda3-x64"
    INSTALLZMQ: 1
    INSTALLRMQ: 1
    APPVEYOR_SAVE_CACHE_ON_ERROR: true

  erlang_download_url: "http://erlang.org/download/otp_win64_20.2.exe"
  erlang_exe_path: "C:\\Users\\appveyor\\erlang.exe"
  erlang_home_dir: "C:\\Users\\appveyor\\erlang"

  rabbitmq_installer_download_url: "https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe"
  rabbitmq_installer_path: "C:\\Users\\appveyor\\rabbitmq-server-3.7.3.exe"

  matrix:
    - platform: x64
      PYTHON_VERSION: "2.7"
    - platform: x64
      PYTHON_VERSION: "3.6"
    # - platform: x64
    #   PYTHON_VERSION: "2.7"
    #   INSTALLRMQ: 1

install:
  - "SET MSVCVER=%APPVEYOR_BUILD_WORKER_IMAGE:~-2,2%"
  - "if %MSVCVER% gtr 11 set /a MSVCVER = MSVCVER - 1"
  - "SET VSINSTALLDIR=%ProgramFiles(x86)%\\Microsoft Visual Studio %MSVCVER%.0\\"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET MPLBACKEND=agg"
  - "SET ZMQINSTALLDIR=%APPVEYOR_BUILD_FOLDER%"

  # Setup Visual C++ toolset
  # TODO: Generic case. This is specific to 64bit VS 2015/2017 (14.0/16.0)
  - if "%MSVCVER%" == "16" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 /debug
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

  # Create a conda environment
  - "conda update -q --yes conda"
  - "conda create -q --yes -n test python=%PYTHON_VERSION%"
  - "activate test"

  # Check that we have the expected version of Python
  - "python --version"

  # Upgrade pip and setuptools and wheel to get clean install
  - "pip install --upgrade pip"
  - "pip install --upgrade wheel"
  - "pip install --upgrade setuptools"

  # Install make
  # - "choco install make -y"

  # Install ZeroMQ
  - if "%INSTALLZMQ%" == "1" call "ci\\install-czmq-windows.bat"
  # - "ECHO %PATH%"
  # - where zmq.lib
  # - where czmq.lib
  # - where zmq.h
  # - where czmq.h

  # Install & start RabbitMQ
  - ps: $webclient=New-Object System.Net.WebClient
  - ECHO Downloading Erlang...
  - ps: $webclient.DownloadFile("$env:erlang_download_url", "$env:erlang_exe_path")
  - ECHO Starting Erlang...
  - start /B /WAIT %erlang_exe_path% /S /D=%erlang_home_dir%
  - set ERLANG_HOME=%erlang_home_dir%
  - ECHO Downloading RabbitMQ...
  - ps: $webclient.DownloadFile("$env:rabbitmq_installer_download_url", "$env:rabbitmq_installer_path")
  - ECHO Installing and starting RabbitMQ with default config...
  - start /B /WAIT %rabbitmq_installer_path% /S
  - ps: (Get-Service -Name RabbitMQ).Status
  # - "if %INSTALLRMQ% == 1 ci\\install-rmqserver-windows.bat"  
  # - "if %INSTALLRMQ% == 1 ci\\start-rmqserver-windows.bat"  

  # Install testing dependencies
  - "pip install coverage coveralls codecov flake8 pypiwin32"

  # Install dependencies using conda/pip
  # - "conda install --yes -c conda-forge numpy nose coverage coveralls codecov flake8"
  # - "conda install --yes -c conda-forge pystache pyyaml astropy scipy pika"
  # - "pip install zmq"

  # Install cis_interface allowing pip to resolve requirements
  - "pip install -e ."

cache:
  - '%LOCALAPPDATA%\pip\Cache -> setup.py'
  - 'C:\Users\appveyor\.cis_interface.cfg -> setup.py'
  - libsodium    -> ci\install-czmq_windows.bat
  - libzmq       -> ci\install-czmq_windows.bat
  - build_libzmq -> ci\install-czmq_windows.bat
  - czmq         -> ci\install-czmq_windows.bat
  - build_czmq   -> ci\install-czmq_windows.bat

# Not a .NET project
build: false

before_test:
  - "flake8 cis_interface"

test_script:
  # - "nosetests --nologcapture --with-coverage --cover-package=cis_interface -svx cis_interface/tests/test_runner.py"
  - "nosetests --with-coverage --cover-package=cis_interface -svx cis_interface"


after_test:
  - "codecov"
