# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

# branches to build
branches:
  # whitelist
  only:
    - topic/windows

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

os: Visual Studio 2015

#---------------------------------#
#    environment configuration    #
#---------------------------------#

environment:

  global:
    PYTHON: "C:\\Miniconda3-x64"
    INSTALLZMQ: 1
    INSTALLRMQ: 1
    APPVEYOR_SAVE_CACHE_ON_ERROR: true

  matrix:
    - platform: x64
      PYTHON_VERSION: "2.7"
      INSTALLRMQ: 0
    - platform: x64
      PYTHON_VERSION: "2.7"
    - platform: x64
      PYTHON_VERSION: "3.6"

install:
  - "SET MSVCVER=%APPVEYOR_BUILD_WORKER_IMAGE:~-2,2%"
  - "if %MSVCVER% gtr 11 set /a MSVCVER = MSVCVER - 1"
  - "SET VSINSTALLDIR=%ProgramFiles(x86)%\\Microsoft Visual Studio %MSVCVER%.0\\"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET MPLBACKEND=agg"
  - "SET ZMQINSTALLDIR=%APPVEYOR_BUILD_FOLDER%"

  # Setup Visual C++ toolset
  # TODO: Generic case. This is specific to 64bit VS 2015/2017 (14.0/16.0)
  - if "%MSVCVER%" == "16" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 /release
  - if "%MSVCVER%" == "14" if /I "%PLATFORM%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

  # Create a conda environment
  - "conda update -q --yes conda"
  - "conda create -q --yes -n test python=%PYTHON_VERSION%"
  - "activate test"

  # Check that we have the expected version of Python
  - "python --version"

  # Upgrade pip and setuptools and wheel to get clean install
  - "pip install --upgrade pip"
  - "pip install --upgrade wheel"
  - "pip install --upgrade setuptools"

  # Install ZeroMQ
  - if "%INSTALLZMQ%" == "1" call "ci\\install-czmq-windows.bat"
  # - "ECHO %PATH%"
  # - where zmq.lib
  # - where czmq.lib
  # - where zmq.h
  # - where czmq.h

  # Install & start RabbitMQ
  - "if %INSTALLRMQ% == 1 ci\\install-rmqserver-windows.bat"  
  - "if %INSTALLRMQ% == 1 ci\\start-rmqserver-windows.bat"  

  # Install testing dependencies
  - "pip install coverage coveralls codecov flake8"

  # Install dependencies using conda/pip
  # - "conda install --yes -c conda-forge numpy nose coverage coveralls codecov flake8"
  # - "conda install --yes -c conda-forge pystache pyyaml astropy scipy pika"
  # - "pip install zmq"

  # Install cis_interface allowing pip to resolve requirements
  - "pip install -e ."

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - libsodium    -> ci\install-czmq_windows.bat
  - libzmq       -> ci\install-czmq_windows.bat
  - build_libzmq -> ci\install-czmq_windows.bat
  - czmq         -> ci\install-czmq_windows.bat
  - build_czmq   -> ci\install-czmq_windows.bat

# Not a .NET project
build: false

before_test:
  - "flake8 cis_interface"

test_script:
  - "ciscc cis_interface/examples/gs_lesson3/src/gs_lesson3.c"
  - "devenv /debugexe 'C:\\projects\\cis-interface\\cis_interface\\examples\\gs_lesson3\\src\\gs_lesson3_c'"
  - "cdb.exe C:\\projects\\cis-interface\\cis_interface\\examples\\gs_lesson3\\src\\gs_lesson3_c"
  - "C:\\projects\\cis-interface\\cis_interface\\examples\\gs_lesson3\\src\\gs_lesson3_c"
  # - "nosetests --nologcapture --with-coverage --cover-package=cis_interface -svx cis_interface/examples/tests/test_gs_lesson3.py"
  # - "nosetests --nologcapture --with-coverage --cover-package=cis_interface -svx cis_interface/tests/"


after_test:
  - "codecov"
